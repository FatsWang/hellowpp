{"version":3,"sources":["assets/scripts/ButtonOpenNewURL.js","assets/scripts/MainVideoPlay.js","assets/scripts/VideoPlayerCtrl.js","assets/scripts/showPopover.js"],"names":["cc","Class","extends","Component","properties","url","onLoad","this","node","on","Node","EventType","MOUSE_UP","sys","openURL","openLink","window","location","href","start","macro","ENABLE_TRANSPARENT_CANVAS","videoplayer","VideoPlayer","callback","play","update","videoPlayer","controlButtons","_this","playVideoArea","onVideoPlayerEvent","sender","event","CLICKED","isPlaying","pause","READY_TO_PLAY","META_LOADED","PLAYING","toggleVisibility","visibility","string","active","keepRatioSwitch","keepAspectRatio","switchOnlineVideo","remoteURL","resourceType","ResourceType","REMOTE","switchOnlineVideo2","stop","currentTime","toFixed","getDuration","type","Enum","文本气泡","图片气泡","default","text","visible","tooltip","pic","MOUSE_ENTER","canWidth","find","width","resources","load","err","prefab","popover","instantiate","parent","MOUSE_MOVE","setPosition","getLocationX","getLocationY","isShowPopover","MOUSE_LEAVE","schedule","height","getComponent","Label","color","Color","WHITE"],"mappings":"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","sourcesContent":["//将此节点挂载到节点上，此节点即可有hover效果\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        url:\"null\"\r\n    },\r\n\r\n    onLoad () {\r\n        \r\n        \r\n        //点击→跳转链接\r\n        this.node.on(cc.Node.EventType.MOUSE_UP, function (event) {\r\n            if (this.url != \"null\") {\r\n                // this.openLink(this.url);//原地打开\r\n                cc.sys.openURL(this.url);//新开窗口\r\n            }\r\n          }, this);\r\n    },\r\n\r\n    //跳转链接\r\n    openLink:function (url) {//url为字符串\r\n        window.location.href = url;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","cc.macro.ENABLE_TRANSPARENT_CANVAS = true;\r\nfunction randomNum (min, max){\r\n    return Math.random() * (max - min + 1) + min;\r\n}\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        videoplayer: cc.VideoPlayer\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n\r\n        this.videoplayer.node.on('ready-to-play', this.callback, this);\r\n    },\r\n    callback: function (videoplayer) {\r\n        // 这里的 videoplayer 表示的是 VideoPlayer 组件\r\n        // 做任何你想要对 videoplayer 执行的操作\r\n        // 需要注意的是，使用这种方式注册的事件，无法传递 customEventData\r\n    },\r\n\r\n    start () {\r\n        this.videoplayer.play();\r\n\r\n    },\r\n\r\n     update (dt) {\r\n        this.videoplayer.play();\r\n        /*if (this.videoPlayer.isPlaying()) {\r\n                this.videoPlayer.play();\r\n            } else {\r\n                this.videoPlayer.play();\r\n            }*/\r\n     },\r\n});\r\n","//const i18n = require('i18n');\n//const TipsManager = require('TipsManager');\n\nfunction getStatus (event) {\n    switch (event) {\n        case cc.VideoPlayer.EventType.PLAYING:\n            return 'PLAYING';\n        case cc.VideoPlayer.EventType.PAUSED:\n            return 'PAUSED';\n        case cc.VideoPlayer.EventType.STOPPED:\n            return 'STOPPED';\n        case cc.VideoPlayer.EventType.COMPLETED:\n            return 'COMPLETED';\n        case cc.VideoPlayer.EventType.META_LOADED:\n            return 'META_LOADED';\n        case cc.VideoPlayer.EventType.CLICKED:\n            return 'CLICKED';\n        case cc.VideoPlayer.EventType.READY_TO_PLAY:\n            return 'READY_TO_PLAY';\n        default:\n            return 'NONE';\n    }\n};\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        videoPlayer: cc.VideoPlayer,\n        //statusLabel: cc.Label,\n        //currentTime: cc.Label,//视频时间\n        //resSwitchBtnLabel: cc.Label,\n        controlButtons: cc.Node,\n        //keep_Ratio_Switch: cc.Node,\n       // playVideoArea: cc.Node,\n        //visibility: cc.Label,\n    },\n\n    start () {\n       // TipsManager.init();\n        //this.controlButtons.active = false;\n        //this.keep_Ratio_Switch.active = !(cc.sys.isBrowser || cc.sys.platform === cc.sys.WECHAT_GAME);\n        this.playVideoArea.on('touchend', () => {\n            this.videoPlayer.play();\n        });\n    },\n\n    onVideoPlayerEvent (sender, event) {\n        //this.statusLabel.string = 'Status: ' + getStatus(event);\n        if (event === cc.VideoPlayer.EventType.CLICKED) {\n            if (this.videoPlayer.isPlaying()) {\n                this.videoPlayer.pause();\n            } else {\n                this.videoPlayer.play();\n            }\n        }\n        else if (event === cc.VideoPlayer.EventType.READY_TO_PLAY || event === cc.VideoPlayer.EventType.META_LOADED) {\n            //this.controlButtons.active = true;\n            //this.playVideoArea.active = true;\n        }\n        else if (event === cc.VideoPlayer.EventType.PLAYING) {\n            //this.playVideoArea.active = false;\n        }\n    },\n\n   /*toggleFullscreen () {\n        if (\n            cc.sys.isBrowser &&\n            cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ &&\n            cc.sys.browserVersion <= 7.2 &&\n            /Nexus 6/.test(navigator.userAgent)\n        ) {\n            TipsManager.createTips(i18n.t('cases/02_ui/09_videoplayer/videoPlayer.nonsupport_fullscreen'));\n            return cc.log('May be crash, so prohibit full screen');\n        }\n        this.videoPlayer.isFullscreen = true;\n    },*/\n\n    toggleVisibility (event) {\n        //this.videoPlayer.node.active = !this.videoPlayer.node.active;\n        //this.playVideoArea.active = this.videoPlayer.node.active;\n        this.visibility.string = 'Visibility: ' + this.videoPlayer.node.active;\n    },\n\n    keepRatioSwitch () {\n        this.videoPlayer.keepAspectRatio = !this.videoPlayer.keepAspectRatio;\n    },\n\n    switchOnlineVideo () {\n        this.videoPlayer.remoteURL = 'https://www.w3school.com.cn/i/movie.mp4';\n        this.videoPlayer.resourceType = cc.VideoPlayer.ResourceType.REMOTE;\n        //this.playVideoArea.active = true;\n    },\n    switchOnlineVideo2 () {\n        this.videoPlayer.resourceType = cc.VideoPlayer.ResourceType.REMOTE;\n        this.videoPlayer.remoteURL = 'http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4';\n        \n        //this.playVideoArea.active = true;\n    },\n\n    /*switchLoaclVide () {\n        this.videoPlayer.resourceType = cc.VideoPlayer.ResourceType.LOCAL;\n        this.playVideoArea.active = true;\n    }, 本地加载路径，但不知道如何切换本地路径，用网络加载的方式，加载本地视频，上方的Switchonlinecideo */\n\n    play () {\n        this.videoPlayer.play();\n        //this.playVideoArea.active = false;\n    },\n\n    pause () {\n        this.videoPlayer.pause();\n    },\n\n    stop () {\n        this.videoPlayer.stop();\n    },\n\n    update () {\n        if (this.currentTime && this.videoPlayer.currentTime >= 0) {\n            this.currentTime.string = this.videoPlayer.currentTime.toFixed(2) + ' / ' + this.videoPlayer.getDuration().toFixed(2);\n        }\n    }\n\n});\n","//将脚本挂到节点后，鼠标移入该节点就会出现提示气泡\r\nvar type = cc.Enum({\r\n    文本气泡: 0,\r\n    图片气泡: 1,\r\n});\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        type: {\r\n            type: cc.Enum(type),\r\n            default: type.文本气泡,\r\n        },\r\n        text: {\r\n                default: \"null\",\r\n                visible() {return (this.type == type.文本气泡);},\r\n                tooltip: \"请填写文本内容\"\r\n        },\r\n        pic: {\r\n                default: \"weChatQR\",\r\n                visible() {return (this.type == type.图片气泡);},\r\n                tooltip: \"请填写在resources/img中的图片的名称\"\r\n        },\r\n       \r\n    },\r\n\r\n    onLoad () {\r\n        //生成popover\r\n        this.node.on( cc.Node.EventType.MOUSE_ENTER, function (event) {//【移入目标节点区域】使用枚举类型来注册\r\n            //屏幕宽度的一半\r\n            var canWidth = cc.find(\"Canvas\").width / 2 + 10;\r\n            //如果场景无气泡，则生成，反之不生成\r\n            if (cc.find(\"Canvas/popover\") == null) {\r\n                cc.resources.load(\"prefab/popover\", function (err, prefab) {\r\n                    var popover = cc.instantiate(prefab);\r\n                    popover.parent = cc.find(\"Canvas\");\r\n                    cc.find(\"Canvas\").on(cc.Node.EventType.MOUSE_MOVE, function (event) {//【监听鼠标位置】使用枚举类型来注册\r\n                        //获取鼠标的世界坐标\r\n                        popover.setPosition(event.getLocationX()-canWidth, event.getLocationY()-540);\r\n                    }, this);\r\n                });\r\n                this.isShowPopover();\r\n            } else {\r\n                this.isShowPopover();\r\n                cc.find(\"Canvas/popover\").active = true;\r\n                cc.find(\"Canvas\").on(cc.Node.EventType.MOUSE_MOVE, function (event) {//【监听鼠标位置】使用枚举类型来注册\r\n                    //获取鼠标的世界坐标\r\n                    cc.find(\"Canvas/popover\").setPosition(event.getLocationX()-canWidth, event.getLocationY()-540);\r\n                }, this);\r\n            };\r\n        }, this);\r\n        //销毁popover\r\n        this.node.on( cc.Node.EventType.MOUSE_LEAVE, function (event) {\r\n            if (cc.find(\"Canvas/popover\") != null) {\r\n                var popover =cc.find(\"Canvas/popover\");\r\n                popover.active = false;\r\n            };\r\n        }, this);\r\n        },\r\n\r\n\r\n    //检测气泡是否生成\r\n    isShowPopover:function () {\r\n        if (cc.find(\"Canvas/popover/text\") == null) {\r\n            this.schedule(function() {\r\n                this.isShowPopover(); \r\n            }, 0.01,1);\r\n        } else {\r\n            //判断是图片还是文版：如果是图片，则显示图片，反之显示文本\r\n            if (this.type == 1) {\r\n                cc.find(\"Canvas/popover\").height = 230;\r\n                cc.find(\"Canvas/popover/text\").active = false;\r\n                cc.find(\"Canvas/popover/pic\").active = true;\r\n               /* var imgUrl = \"img/\" + this.pic;\r\n                cc.resources.load(imgUrl, cc.SpriteFrame, function (err, spriteFrame) {\r\n                    cc.find(\"Canvas/popover/pic\").getComponent(cc.Sprite).spriteFrame = spriteFrame;\r\n                }); */ //注释掉就好了，我的天\r\n            }else{\r\n                cc.find(\"Canvas/popover\").height = 142;\r\n                cc.find(\"Canvas/popover/text\").active = true;\r\n                cc.find(\"Canvas/popover/pic\").active = false;\r\n                cc.find(\"Canvas/popover/text\").getComponent(cc.Label).string = this.text;//设置标题\r\n                cc.find(\"Canvas/popover/text\").color = cc.Color.WHITE;\r\n            };\r\n        }\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"],"file":"index.js"}